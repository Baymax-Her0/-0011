Урок №13
Задание №1

import random

def create_matrix(rows, cols):
  """
  Создает матрицу заданного размера, заполненную случайными числами.

  Аргументы:
    rows: Количество строк в матрице.
    cols: Количество столбцов в матрице.

  Возвращает:
    Матрицу (список списков).
  """
  matrix = []
  for i in range(rows):
    row = []
    for j in range(cols):
      row.append(random.randint(-100, 100))  # Случайные числа от -100 до 100
    matrix.append(row)
  return matrix

def add_matrices(matrix1, matrix2):
  """
  Складывает две матрицы.

  Аргументы:
    matrix1: Первая матрица.
    matrix2: Вторая матрица.

  Возвращает:
    Сумму матриц (новая матрица), или None, если матрицы нельзя сложить.
  """
  rows1 = len(matrix1)
  cols1 = len(matrix1[0])
  rows2 = len(matrix2)
  cols2 = len(matrix2[0])

  if rows1 != rows2 or cols1 != cols2:
    print("Матрицы нельзя сложить, размеры не совпадают.")
    return None

  result_matrix = []
  for i in range(rows1):
    row = []
    for j in range(cols1):
      row.append(matrix1[i][j] + matrix2[i][j])
    result_matrix.append(row)
  return result_matrix

# Пример использования:

# Создаем две матрицы 10x10
rows = 10
cols = 10
matrix_1 = create_matrix(rows, cols)
matrix_2 = create_matrix(rows, cols)

# Выводим матрицы (необязательно, но полезно для проверки)
print("Матрица 1:")
for row in matrix_1:
  print(row)

print("\nМатрица 2:")
for row in matrix_2:
  print(row)

# Складываем матрицы
matrix_3 = add_matrices(matrix_1, matrix_2)

# Выводим результат (если сложение прошло успешно)
if matrix_3:
  print("\nСумма матриц:")
  for row in matrix_3:
    print(row)

# Пример с матрицами другого размера (например, 4x3)
rows = 4
cols = 3
matrix_4 = create_matrix(rows, cols)
matrix_5 = create_matrix(rows, cols)

print("\nМатрица 4:")
for row in matrix_4:
  print(row)

print("\nМатрица 5:")
for row in matrix_5:
  print(row)

matrix_6 = add_matrices(matrix_4, matrix_5)

if matrix_6:
  print("\nСумма матриц:")
  for row in matrix_6:
    print(row)

Урок №14
Задание №1

my_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]

def print_list_recursive(my_list, index=0):
  """
  Рекурсивно выводит элементы списка от начала до конца.

  Аргументы:
    my_list: Список, который нужно вывести.
    index: Текущий индекс в списке (по умолчанию 0).
  """
  if index < len(my_list):
    print(my_list[index])
    print_list_recursive(my_list, index + 1)  # Рекурсивный вызов
  else:
    print("Конец списка")

# Вызываем функцию для вывода списка
print_list_recursive(my_list)

Урок №15
Задание №1

class Transport:
    def __init__(self, name, max_speed, mileage):
        self.name = name
        self.max_speed = max_speed
        self.mileage = mileage

class Autobus(Transport):
    def __init__(self, name, max_speed, mileage):
        super().__init__(name, max_speed, mileage)

# Создаем объект Autobus
autobus = Autobus("Renaul Logan", 180, 12)

# Выводим информацию об Autobus
print(f"Название автомобиля: {autobus.name} Скорость: {autobus.max_speed} Пробег: {autobus.mileage}")

Задание №2

class Transport:
    def __init__(self, name, max_speed, mileage):
        self.name = name
        self.max_speed = max_speed
        self.mileage = mileage

    def seating_capacity(self, capacity):
        return f"Вместимость одного автобуса {self.name}: {capacity} пассажиров"

class Autobus(Transport):
    def __init__(self, name, max_speed, mileage):
        super().__init__(name, max_speed, mileage)

    def seating_capacity(self, capacity=50):  # Значение по умолчанию 50
        return super().seating_capacity(capacity)

# Создаем объект Autobus
autobus = Autobus("Renaul Logan", 180, 12)

# Выводим вместимость автобуса
print(autobus.seating_capacity())

